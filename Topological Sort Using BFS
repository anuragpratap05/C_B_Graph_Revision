#include<bits/stdc++.h>
using namespace std;

class graph
{
	//int v;
public:
	//this->v=v;

	map<int, list<int>> l;
	void addedge(int x, int y)
	{
		l[x].push_back(y);
	}

	void bfs(int v)
	{
		queue<int> q;
		int* indegree = new int[v];
		for (int i = 0; i < v; i++)
		{
			indegree[i] = 0;
		}

		for (auto p : l)
		{
			for (auto y : p.second)
			{
				indegree[y]++;
			}
		}
		for (int i = 0; i < v; i++)
		{
			if (indegree[i] == 0)
			{
				q.push(i);
			}
		}

		while (!q.empty())
		{
			int node = q.front();
			cout << node << " ";
			q.pop();
			for (auto nbr : l[node])
			{
				indegree[nbr]--;
				if (indegree[nbr] == 0)
				{
					q.push(nbr);
				}
			}
		}
	}



};

int main()
{
#ifndef ONLINE_jUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	graph g;
	g.addedge(0, 2);
	g.addedge(1, 2);
	g.addedge(1, 4);
	g.addedge(4, 5);
	g.addedge(2, 5);
	g.addedge(2, 3);
	g.addedge(3, 5);

	g.bfs(6);

}# C_B_Graph_Revision
